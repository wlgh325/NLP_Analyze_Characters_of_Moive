안녕하세요 자연어처리 '자바로 자연어' 팀의 발표를 맡은 민성재입니다.

[착안점]
저희가 이번 프로젝트의 아이디어를 얻게된 부분은 축구 경기가 끝난 후 나오는 패스맵입니다.
패스맵이란 축구 경기동안 선수들간의 패스를 시각화하여 보여주는 것입니다.
패스맵에서 선수가 공을 많이 가지면 노드의 크기가 커지며  두 선수가 패스를 많이 주고 받을 수록
선의 굵기가 굵어집니다.
이를 통해 축구 게임에서 영향력이 큰 선수가 누구였는지 어떤 포메이션을 사용했는지 등을 
쉽게 파악할 수 있습니다.
여기에 착안하여 저희는 영화 스크립트를 분석하여 등장인물간의 관계도를 패스맵과 유사하게
그려보는 것을 프로젝트 주제로 선정하였습니다.
등장인물이 얼마나 영화에서 많이 등장하는지, 등장인물끼리 얼마나 많은 대사가 오고가는지를
시각화하여 movie map을 만들어보기로 하였습니다.

[프로젝트 흐름]
먼저 저희는 영화 스크립트 사이트 www.imsdb.com 에서 영화 스크립트를 여러 장르별로 가져와 
input.txt로 만들었습니다.
이 input.txt를 읽을 때 Scene을 구분하여 등장인물이 얼마나 등장하고 대사를 말하는지를 카운트했는데
이 Scene을 구분하는 방법으로는 시나리오에 Scene을 구분할 때 쓰는 단어인 INT, EXT, FINISH를 활용하
였습니다.
이렇게 등장인물의 등장횟수와 대화횟수를 카운트하여 각 영화마다 output.txt를 뽑아냈습니다.
이 output.txt는 누가 누구에게 얼만큼의 weight만큼 대화했는지가 담겨있습니다.
이 output.txt를 networkx.py 라이브러리에 넣어서 네트워크를 구성했습니다.

[기능설명]
1. Scene 나누기
스크립트에서 씬을 나누는 기준인 장면 표제를 이용 (ex : INT, EXT, FINISH)
전체영화를 개별 씬으로 나누고 그 안에 등장인물을 카운트

2.Weight 부여 방식
 node 1번 방식 - 많은 씬에 등장하는 배우일수록 더 큰 비중을 가지는 배우라고 가정.
                       모든 씬마다 등장하는 모든배우에게 1씩 가중치를 부여하여
                      많은 씬에 등장할수록 높은 가중치를 갖게 하였습니다.

 node 2번 방식 - 앞의 방식의 문제점은 많은 씬에 등장만 하고 대사 수 자체는 적은 경우를
                       고려 할 수 없습니다. 따라서 씬 내부에서 많은 대사를 가진 배우가 더 높은
                      비중을 가지는게 맞다고 생각하여 이 방법은 더 많은 대사를 한 배우가 더 높은
                       비중을 가집니다. 즉 영화에서 해당 배우의 총 대사 횟수가 node의 가중치가 됩니다.


 edge 1번방식 - 같은 씬에 등장하는 인물사이에는 모두 관계가 있다고 가정합니다.
                      따라서 같은 씬에 등장하는 모든 배우간 edge에 1씩 가중치를 줍니다.

 edge 2번방식 - 하지만 같은 씬에 등장했다고 해서 모두 같은 정도의 관계를 가진다고 할수 없습니다.
                     따라서 같은 씬에서 대사를 했어도 예를 들어 a b c 세명의 배우가 등장하고 
                     각각 5, 3 ,1 번씩 대사를 했다면 그 씬에서는 a , b가 가장 큰 관계가 있다고 가정합니다.
                     즉 같은 씬내에서 가장 많이 대화한 두명이 관계가 유의미하다고 판단합니다.

 edge 3번방식 - 하지만 위의 방식에도 문제는 존재합니다. 각각의 씬에서 관계값 자체는 적절할수 있지만
                      한 씬에서 대화를 100번한것과 10번한것에서 배우간의 관계가 비율은 같지만 실제 횟수는
                     다를 수 있기 때문입니다. 비율은 같아도 더 많은 대사를 했다면 더 큰 가중치를 가져야합니다.
                     따라서 이 방식은 씬 내부에서의 값이 아닌 전체 영화에서 씬마다의 globality를 고려한
                      edge 추출 방식이다. 각 씬에서의 가중치와 씬에서의 대사 횟수를 곱하여 최종 edge 의 
                     가중치를 결정합니다.


위와 같이 node 에 관한 weight 부여방식이 2가지
             edge 에 관한 weight 부여 방식이 3가지 이며 이것을 모두 고려하여 6가지의 경우의 수가 존재합니다.
이에 따라 6가지 방법으로 네트워크를 구성했고 저희가 최종적으로 어떤 weight부여 방식을 채택했는지
말씀드리겠습니다.

다음은 데드풀을 6가지 웨이트 부여방식으로 확인해본 결과입니다.

첫번째 네트워크 예시는 각 씬에 등장하는 모든 배우에게 모두 1씩 가중치를 부여하는 방식이고
각 노드의 크기에서 별다른 차이점을 확인할 수 없었습니다.

두번째 네트워크에서는 이전 방식과 달리 씬에 등장하는것뿐아니라 대사의 횟수도 카운트하여
엣지의 굵기를 정하였기에 엣지의 굵기가 더 명확하게 나타나는것을 알수있습니다.

세번째 네트워크에서는 대사의 횟수뿐아니라 전체 영화에서의 비율도 고려했습니다.
두번째 네트워크에 비해서 엣지의 갯수 자체가 줄어들었습니다. 주인공 데드풀에게 굉장히
밀집된 네트워크에서 전체적으로 균형된 네트워크로 나타난것으로보아 단순한 연결관계보다
실제 대화 횟수가 고려되어 다른 형태를 띄게된것으로 보입니다.

네번째는 node의 크기가 단순히 등장횟수만이 아닌 대사횟수로 카운트된 네트워크입니다.
앞서 본 네트워크에비해 대사 횟수가 많은 등장인물의 노드가 크게 두드러진걸 확인할수있습니다.

다섯번째는 node의 크기가 두드러진것뿐아니라 edge에 있어서도 더욱 굵기가 명확하게 나타납니다.

여섯번째는 저희가 결국 채택한 방식인데 등장인물의 등장횟수, 대사횟수, 대사비율을 모두 고려하여
나타난 네트워크입니다.

맨처음 저희가 첫번째 방법부터 하나하나 해보면서 네트워크를 구성해보았고
그때마다 하나하나 더 고려할 점이 있다고 생각이 들었고 교수님 또한 여러가지 방법을 고려하며
네트워크를 구성하는것이 좋을것 같다고 하셔서
웨이트 주는 방식을 개선하다보니 위와 같은 6가지 방식을 모두 고려해보았습니다.
확실히 저희가 마지막에 첫번째 방식보다 노드의 크기도 훨씬 두드러지며
엣지또한 훨씬 다양하게 구성되는 것을 확인하였습니다.

[네트워크 예시 & 분석]